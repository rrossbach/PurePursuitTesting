plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2019.0.0-beta0-pre1"
}

def ROBOT_MAIN_CLASS = "###ROBOTCLASSREPLACE###"

dependencies {
   compile 'openrio.mirror.third.ctre:CTRE-phoenix-java:5.3.1.0'
   compile 'openrio.mirror.third.kauailabs:navx-java:3.0.348'
   compile 'com.google.flatbuffers:flatbuffers-java:1.10.0'
   nativeZip 'openrio.mirror.third.ctre:CTRE-phoenix-java:5.3.1.0:native@zip'
}

repositories {
   maven {
   	url "https://raw.githubusercontent.com/Open-RIO/Maven-Mirror/master/m2"
   }
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = getTeamNumber()
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = 'deploy'
        }
    }
}

// Defining my dependencies. In this case, WPILib (+ friends), CTRE Toolsuite (Talon SRX)
// and NavX.
repositories {
    mavenCentral()
}

dependencies {
    compile wpilib()
    compile javaVendorLibraries()
    nativeZip jniRoboRIOVendorLibraries()
    nativeDesktopZip jniDesktopVendorLibraries()
    testCompile 'junit:junit:4.12'
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}

wrapper {
    gradleVersion = '4.9'
    distributionPath = 'permwrappers/dists'
    archivePath = 'permwrappers/dists'
}
